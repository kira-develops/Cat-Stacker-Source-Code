import {
    gameBridge
} from './GameBridge.js';

export const USER_DATA_STATES = {
    NOT_LOADED: 0,
    LOADING: 1,
    LOADED: 2,
};

/**
 * Class that manages retrieving and saving user data as well as provided a centralized run-time place to query that data
 */
class UserDataManager {
    constructor() {
        this._state = USER_DATA_STATES.NOT_LOADED;
        this._data = {
            gameData: {},
        };
    }

    /**
     * Retrieves the loading state of the user data
     */
    get loadingState() {
        return this._state;
    }

    /**
     * Retrieves the current user data
     */
    get data() {
        return this._data.gameData;
    }

    /**
     * Loads the user data
     *
     * @param {Function} onSuccess - callback for when the data was successfully loaded
     * @param {Function} onFailure - callback for when the data was unable to be retrieved.  Takes a string reason as an argument.
     */
    load(onSuccess = _.noop, onFailure = _.noop) {
        if (gameBridge.usingRealBridge) {
            this._state = USER_DATA_STATES.LOADING;
            gameBridge.getUserData().then((userData) => {
                this._state = USER_DATA_STATES.LOADED;
                this._data = _.clone(userData); // cloning since I don't want to mutate the gameData field from the dashboard's API
                this._data.gameData = JSON.parse(userData.gameData) || {};
                onSuccess();
            }, (reason) => {
                this._state = USER_DATA_STATES.NOT_LOADED;
                onFailure(reason);
            });
        } else {
            this._state = USER_DATA_STATES.LOADED;
            onSuccess();
        }
    }

    /**
     * Saves the user data
     *
     * @param {Function} onSuccess - callback for when the data was successfully saved
     * @param {Function} onFailure - callback for when the data was unable to be saved.  Takes a string reason as an argument.
     */
    save(onSuccess = _.noop, onFailure = _.noop) {
        if (gameBridge.usingRealBridge) {
            gameBridge.saveUserData(JSON.stringify(this._data.gameData)).then(onSuccess, onFailure);
        } else {
            onSuccess();
        }
    }
}

export const userDataManager = new UserDataManager();



//////////////////
// WEBPACK FOOTER
// ./node_modules/@cainc/game-common/src/js/util/UserDataManager.js
// module id = 344
// module chunks = 0