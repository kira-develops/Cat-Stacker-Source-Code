import ExitButton from '../components/ExitButton.js';
import {
    gameBridge
} from '../util/GameBridge.js';

const NAME_MAX = 8;
const SCORE_ROWS = 5;

export default class ScoreBoard extends Phaser.State {
    init(score, styling) {
        this._score = score;
        this._styling = styling;
    }

    create() {
        _.bindAll(this, 'showHighScores');

        const exitAtlas = {
            atlas: 'close_button'
        };
        const yourScoreBounds = {
            x: 455,
            y: 170,
            width: 356,
            height: 46,
        };
        const exitPos = {
            x: 473,
            y: 800,
        };
        const yourScoreFont = {
            boundsAlignH: 'center'
        };
        if (this._styling) {
            _.merge(exitAtlas, this._styling.exitAsset);
            _.merge(yourScoreFont, this._styling.yourScoreFont);
            _.merge(yourScoreBounds, this._styling.yourScoreBounds);
            _.merge(exitPos, this._styling.exitPosition);
        }

        this.background = this.add.image(0, 0, 'game_over_background');

        if (gameBridge.shouldShowExitButton) {
            this.exitButton = new ExitButton(this, exitPos.x, exitPos.y, exitAtlas);
        }

        this._text = this.add.text(0, 0, this._score, yourScoreFont);
        this._text.setTextBounds(yourScoreBounds.x, yourScoreBounds.y, yourScoreBounds.width, yourScoreBounds.height);

        if (gameBridge.sendScore) {
            gameBridge.sendScore(this._score).then(this.showHighScores);
        } else {
            this.showHighScores(this.createDefaultHighScores());
        }
    }

    showHighScores(scores) {
        const allTimeLayout = {
            star_x: 121,
            list_x: 176,
            name_x: 206,
            score_x: 500,
            score_width: 67,

            start_y: 467,
            row_height: 50,
            star_row_dy: 10,
        };
        const weeklyLayout = {
            star_x: 621,
            list_x: 676,
            name_x: 706,
            score_x: 999,
            score_width: 67,

            start_y: 467,
            row_height: 50,
            star_row_dy: 10,
        };
        if (this._styling) {
            _.merge(allTimeLayout, this._styling.allTimeLayout);
            _.merge(weeklyLayout, this._styling.weeklyLayout);
        }
        this._createHighScoreDisplay(scores.allTimeScores, allTimeLayout);
        this._createHighScoreDisplay(scores.currentWeekScores, weeklyLayout);
    }

    _createHighScoreDisplay(scoreArray, layout) {
        const fontOptions = {};
        const scoreFontOptions = {
            boundsAlignH: 'right'
        };
        if (this._styling) {
            _.merge(fontOptions, this._styling.highScoresFont);
            _.merge(scoreFontOptions, this._styling.highScoresFont);
        }

        const starIndex = this._findScoreForPlaySession(scoreArray);
        for (let i = 0; i < SCORE_ROWS && i < scoreArray.length; i++) {
            const scoreObj = scoreArray[i];
            const y = layout.start_y + i * layout.row_height;
            if (i === starIndex) {
                this.add.image(layout.star_x, y + layout.star_row_dy, 'star');
            }
            this.add.text(layout.list_x, y, `${i + 1}.`, fontOptions);
            this.add.text(layout.name_x, y, this._trimName(scoreObj.firstName), fontOptions);
            const score = this.add.text(0, 0, scoreObj.score, scoreFontOptions);
            score.setTextBounds(layout.score_x, y, layout.score_width, y + layout.row_height);
        }
    }

    _trimName(name) {
        if (name.length > NAME_MAX) {
            name = name.substring(0, NAME_MAX) + 'â€¦';
        }
        return name;
    }

    _findScoreForPlaySession(scoreArray) {
        let index = -1;
        if (gameBridge.usingRealBridge) {
            const studentId = gameBridge.info.studentId;
            index = _.findIndex(scoreArray, (scoreObj) => {
                return scoreObj.studentId === studentId && scoreObj.score === this._score;
            });
        }
        return index;
    }

    createDefaultHighScores() {
        const scoreObj = {
            allTimeScores: [{
                    studentId: 0,
                    firstName: 'Matt',
                    score: 20000
                },
                {
                    studentId: 1,
                    firstName: 'Tif',
                    score: 20000
                },
                {
                    studentId: 2,
                    firstName: 'Kim',
                    score: 20000
                },
                {
                    studentId: 3,
                    firstName: 'Ken',
                    score: 20000
                },
                {
                    studentId: 4,
                    firstName: 'lengthTest',
                    score: 20000
                },
            ],
            currentWeekScores: [{
                    studentId: 0,
                    firstName: 'Matt',
                    score: 20000
                },
                {
                    studentId: 1,
                    firstName: 'Tif',
                    score: 20000
                },
                {
                    studentId: 2,
                    firstName: 'Kim',
                    score: 20000
                },
                {
                    studentId: 3,
                    firstName: 'Ken',
                    score: 20000
                },
                {
                    studentId: 4,
                    firstName: 'lengthTest',
                    score: 20000
                },
            ],
        };
        scoreObj.allTimeScores = _.shuffle(scoreObj.allTimeScores);
        scoreObj.currentWeekScores = _.shuffle(scoreObj.currentWeekScores);

        return scoreObj;
    }
}



//////////////////
// WEBPACK FOOTER
// ./node_modules/@cainc/game-common/src/js/game_states/ScoreBoard.js
// module id = 343
// module chunks = 0